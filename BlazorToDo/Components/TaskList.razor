@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITaskRepository taskRepository
@inject NavigationManager NavigationManager

<MudContainer Fixed="false" MaxWidth="MaxWidth.False" Class="d-flex">
    @if (Tasks is not null)
    {
        @if (!Tasks.Count.Equals(0))
        {
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12">
                <MudGrid Spacing="2" Justify="Justify.FlexStart">
                    @foreach (var task in Tasks)
                    {
                        <MudItem xs="12" sm="12" md="6" lg="3" xl="3" xxl="3">
                            <TaskComponent Task=@task refreshListCallback="refreshListCallback"></TaskComponent>
                        </MudItem>
                    }
                </MudGrid>
            </div>
        }
        else
        {
            <MudText Typo="Typo.caption">There are no tasks here yet...</MudText>
        }
    }
    else
    {
        <MudText Typo="Typo.caption">Loading tasks...</MudText>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
</MudContainer>




@code {
    [Parameter] public bool? FilterCompleted { get; set; }
    [Parameter] public bool FilterArchived { get; set; }
    [Parameter] public EventCallback refreshListCallback { get; set; }


    public string SearchValue { get; set; }
    public List<TaskModel> Tasks { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            //Test Calling API
            var storedTasks = await taskRepository.GetAll();

            if (storedTasks is not null)
            {
                if (!storedTasks.Count.Equals(0))
                {
                    if(FilterArchived) Tasks = storedTasks.Where(x => x.Archived == FilterArchived).ToList();
                    else Tasks = storedTasks.Where(x => x.Completed == FilterCompleted && x.Archived == FilterArchived).ToList();
                }
            }
            else
            {
                Tasks = new List<TaskModel>();
            }
        }
        catch (Exception ex) { Tasks = null; }
    }

    private void CreateTask()
    {
        var parameters = new DialogParameters()
            {
                ["Mode"] = EditMode.New,
                //["Id"] = "0",
                ["Guid"] = new Guid(),
                //["refreshListCallback"] = new EventCallbackFactory().Create(this, new Action(RefreshList))
                ["refreshListCallback"] = refreshListCallback
            };
        DialogService.Show<EditTaskForm>("New task", parameters);
    }

}