@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject ISnackbar Snackbar
@inject ITaskRepository taskRepository
@inject IDialogService DialogService

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderAvatar>
            @switch (@Task.ReportedUrgency)
            {
                case Urgency.Low:
                    <MudAvatar Color="Color.Secondary">@Task.Id</MudAvatar>
                    break;
                case Urgency.Medium:
                    <MudAvatar Color="Color.Warning">@Task.Id</MudAvatar>
                    break;
                case Urgency.High:
                    <MudAvatar Color="Color.Error">@Task.Id</MudAvatar>
                    break;
                case Urgency.NotUrgent:
                    <MudAvatar Color="Color.Primary">@Task.Id</MudAvatar>
                    break;
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1" Class="font-weight-bold">@Task.Title</MudText>
            <MudText Typo="Typo.subtitle2" Inline="true">
                @Task.CreationDate.ToString("dd/MM/yyyy") | @Task.DueDate.ToString("dd/MM/yyyy")
            </MudText>
            @if (!Task.Completed && Task.DueDate < DateTime.Now)
            {
                <MudTooltip Text="Task Due">
                    <MudIcon Icon="@Icons.Filled.Alarm" Color="Color.Error" Size="Size.Small" />
                </MudTooltip>
            }
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudText Typo="Typo.body1">@Task.Description</MudText>

        @if (Task.Tags is not null)
        {
            <MudDivider Light="true" DividerType="DividerType.Middle" Class="my-3" />
            <MudText GutterBottom="true">Tags</MudText>

            @foreach (var tag in @Task.Tags)
            {
                @switch (@Task.ReportedUrgency)
                {
                    case Urgency.Low:
                        <MudChip Color="Color.Secondary">@tag</MudChip>
                        break;
                    case Urgency.Medium:
                        <MudChip Color="Color.Warning">@tag</MudChip>
                        break;
                    case Urgency.High:
                        <MudChip Color="Color.Error">@tag</MudChip>
                        break;
                }
            }
        }
        else
        {
            <MudDivider Light="true" DividerType="DividerType.Middle" Class="my-3" />
            <MudText Typo="Typo.caption">No tag set to this task</MudText>
        }
    </MudCardContent>

    <MudCardActions>
        <!-- Edit Task -->
        <!-- On Archived Tasks, only view task -->
        @if(Task.Archived || Task.Completed)
        {
            <MudTooltip Text="View Task">
                <MudIconButton Icon="@Icons.Filled.RemoveRedEye" Color="Color.Surface"  OnClick="ViewCurrentTask"/>
            </MudTooltip>
        }
        else
        {
            <MudTooltip Text="Edit Task">
                <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Surface"  OnClick="EditCurrentTask"/>
            </MudTooltip>
        }
        <!-- Completed Task -->
        <MudTooltip Text="Complete">
            <MudToggleIconButton Toggled="@Task.Completed"
                                 ToggledChanged="OnCompletedTask"
                                 Icon="@Icons.Filled.CheckCircleOutline"
                                 ToggledIcon="@Icons.Filled.CheckCircle" ToggledColor="Color.Success" ToggledTitle="Completed" />
        </MudTooltip>

        <!-- Archived Task-->
        <MudTooltip Text="Archive">
            <MudToggleIconButton Toggled="@Task.Archived"
                                 ToggledChanged="OnArchivedTask"
                                 Icon="@Icons.Filled.Archive"
                                 ToggledIcon="@Icons.Filled.Unarchive" ToggledColor="Color.Info" ToggledTitle="Archived" />
        </MudTooltip>

        <!-- Delete Task -->
        <MudTooltip Text="Delete">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="UpdateListOnDelete" />
        </MudTooltip>
    </MudCardActions>
</MudCard>

<!-- Mud Message Box Delete Task Confirm -->
<MudMessageBox @ref="confirmDeleteMsg" Title="Confirm Action" CancelText="Cancel">
    <MessageContent>
        Deleting a task can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter] public TaskModel Task { get; set; }
    [Parameter] public EventCallback refreshListCallback { get; set; }

    //Mud Message Box delete task confirm
    MudMessageBox confirmDeleteMsg { get; set; }

    protected async void UpdateListOnDelete()
    {
        //Mud Message Box Delete Task Confirm
        bool? result = await confirmDeleteMsg.Show();
        if (result is not null)
        {
            try
            {
                //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
                var storedTasks = await taskRepository.GetAll();
                //storedTasks.Remove(Task);
                //storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
                await taskRepository.Delete(Task.Id);
                //await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
                Snackbar.Add($"Task #{Task.Id} deleted successfully.", Severity.Success);
                //StateHasChanged();
            }
            catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }
            finally
            {
                //StateHasChanged();
                await refreshListCallback.InvokeAsync();
            }
        }
    }

    protected async void OnCompletedTask(bool completed)
    {
        try
        {
            //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            var storedTasks = await taskRepository.GetAll();
            //storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
            await taskRepository.Delete(Task.Id);
            Task.Completed = completed;
            //storedTasks.Add(Task);
            await taskRepository.Insert(Task);
            //await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
            if (completed) { Snackbar.Add($"Task #{Task.Id} has been completed.", Severity.Success); }
            else { Snackbar.Add($"Task #{Task.Id} is pending again.", Severity.Warning); }
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }
        finally
        {
            //StateHasChanged();
            await refreshListCallback.InvokeAsync();
        }
    }

    protected async void OnArchivedTask(bool archived)
    {
        try
        {
            //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            var storedTasks = await taskRepository.GetAll();
            //storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
            await taskRepository.Delete(Task.Id);
            Task.Archived = archived;
            //storedTasks.Add(Task);
            await taskRepository.Insert(Task);
            //await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
            if (archived) { Snackbar.Add($"Task #{Task.Id} has been archived.", Severity.Info); }
            else { Snackbar.Add($"Task #{Task.Id} has been unarchived.", Severity.Warning); }
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }
        finally
        {
            //StateHasChanged();
            await refreshListCallback.InvokeAsync();
        }
    }

    //TODO: Add edit behavior for current task
    //protected async void EditCurrentTask() => navigationManager.NavigateTo($"/test/{Task.Id}");
    protected void EditCurrentTask()
    {
        var parameters = new DialogParameters()
            {
                ["Mode"] = EditMode.Edit,
                ["Id"] = Task.Id.ToString(),
                ["refreshListCallback"] = new EventCallbackFactory().Create(this, new Action(StateHasChanged))
                //["Mode"] = EditMode.New,
            };
        DialogService.Show<EditTaskForm>("Create a New task", parameters); 
    }

    //TODO: Add view behavior for current archived or completed task
    protected void ViewCurrentTask()
    {
        var parameters = new DialogParameters()
            {
                ["Mode"] = EditMode.View,
                ["Id"] = Task.Id.ToString(),
                ["refreshListCallback"] = new EventCallbackFactory().Create(this, new Action(StateHasChanged))
                //["Mode"] = EditMode.New,
            };
        DialogService.Show<EditTaskForm>("Create a New task", parameters); 
    }
}
