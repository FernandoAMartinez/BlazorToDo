@inject ILocalStorageService localStorage
@inject ISnackbar Snackbar

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderAvatar>
            @switch (@Task.ReportedUrgency)
            {
                case Urgency.Low:
                    <MudAvatar Color="Color.Secondary">@Task.Id</MudAvatar>
                    break;
                case Urgency.Medium:
                    <MudAvatar Color="Color.Warning">@Task.Id</MudAvatar>
                    break;
                case Urgency.High:
                    <MudAvatar Color="Color.Error">@Task.Id</MudAvatar>
                    break;
                case Urgency.NotUrgent:
                    <MudAvatar Color="Color.Primary">@Task.Id</MudAvatar>
                    break;
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1" Class="font-weight-bold">@Task.Title</MudText>
            <MudText Typo="Typo.subtitle2" Inline="true">
                @Task.CreationDate.ToString("dd/MM/yyyy") | @Task.DueDate.ToString("dd/MM/yyyy")
            </MudText>
            @if (!Task.Completed && Task.DueDate < DateTime.Now)
            {
                <MudTooltip Text="Task Due">
                    <MudIcon Icon="@Icons.Filled.Alarm" Color="Color.Error" Size="Size.Small" />
                </MudTooltip>
            }
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudText Typo="Typo.body1">@Task.Description</MudText>

        @if (Task.Tags is not null)
        {
            <MudDivider Light="true" DividerType="DividerType.Middle" Class="my-3" />
            <MudText GutterBottom="true">Tags</MudText>

            @foreach (var tag in @Task.Tags)
            {
                @switch (@Task.ReportedUrgency)
                {
                    case Urgency.Low:
                        <MudChip Color="Color.Secondary">@tag</MudChip>
                        break;
                    case Urgency.Medium:
                        <MudChip Color="Color.Warning">@tag</MudChip>
                        break;
                    case Urgency.High:
                        <MudChip Color="Color.Error">@tag</MudChip>
                        break;
                }
            }
        }
        else
        {
            <MudDivider Light="true" DividerType="DividerType.Middle" Class="my-3" />
            <MudText Typo="Typo.caption">No tag set to this task</MudText>
        }
    </MudCardContent>

    <MudCardActions>
        <!-- Edit Task -->
        <MudTooltip Text="Edit Task">
            <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Surface" />
        </MudTooltip>
        <!-- Completed Task -->
        <MudTooltip Text="Complete">
            <MudToggleIconButton Toggled="@Task.Completed"
                                 ToggledChanged="OnCompletedTask"
                                 Icon="@Icons.Filled.CheckCircleOutline"
                                 ToggledIcon="@Icons.Filled.CheckCircle" ToggledColor="Color.Success" ToggledTitle="Completed" />
        </MudTooltip>

        <!-- Archived Task-->
        <MudTooltip Text="Archive">
            <MudToggleIconButton Toggled="@Task.Archived"
                                 ToggledChanged="OnArchivedTask"
                                 Icon="@Icons.Filled.Archive"
                                 ToggledIcon="@Icons.Filled.Unarchive" ToggledColor="Color.Info" ToggledTitle="Archived" />
        </MudTooltip>

        <!-- Delete Task -->
        <MudTooltip Text="Delete">
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="UpdateListOnDelete" />
        </MudTooltip>
    </MudCardActions>
</MudCard>


@*<MudCard Elevation="2">
    @if (Task.DueDate < DateTime.Now)
    {
    <MudPaper Elevation="2" Style="@($"background-color:{Colors.Red.Darken1}; color:{Colors.Shades.White};")" Class="text-center mb-1">
    Due task
    </MudPaper>
    }
    <MudCardHeader>
    <CardHeaderContent>
    <MudText Typo="Typo.h6">@Task.Title</MudText>
    <MudText Typo="Typo.body2" Class="text-muted">@Task.CreationDate.ToShortDateString()</MudText>
    <MudSpacer />
    <!-- Completed Task -->
    <MudToggleIconButton Toggled="@Task.Completed" ToggledChanged="OnCompletedTask" Icon="@Icons.Material.Filled.CheckBoxOutlineBlank"
    ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="Color.Success" ToggledTitle="Completed" />
    <span>@(Task.Completed ? "Completed" : "Pending")</span>

    <!-- Archived Task-->
    <MudToggleIconButton Toggled="@Task.Archived" ToggledChanged="OnArchivedTask" Icon="@Icons.Material.Filled.CheckBoxOutlineBlank"
    ToggledIcon="@Icons.Material.Filled.CheckBox" ToggledColor="Color.Success" ToggledTitle="Archived" />
    <span>@(Task.Completed ? "Archived" : "Archive")</span>
    </CardHeaderContent>
    <CardHeaderActions>
    <MudText Typo="Typo.body2" Class="text-muted">@Task.DueDate.ToShortDateString()</MudText>
    <MudSpacer />
    <MudText Typo="Typo.subtitle1" Class="text-muted font-weight-bold mt-2 mr-2">#@Task.Id</MudText>
    </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
    <MudText Typo="Typo.body1">@Task.Description</MudText>

    @if (Task.Tags is not null)
    {
    <MudDivider Light="true" DividerType="DividerType.Middle" Class="my-6" />
    <MudText GutterBottom="true">Tags</MudText>

    @foreach (var tag in @Task.Tags)
    {
    @switch (@Task.ReportedUrgency)
    {
    case Urgency.Low:
    <MudChip Color="Color.Secondary">@tag</MudChip>
    break;
    case Urgency.Medium:
    <MudChip Color="Color.Warning">@tag</MudChip>
    break;
    case Urgency.High:
    <MudChip Color="Color.Error">@tag</MudChip>
    break;
    }
    }
    }
    else
    {

    }
    </MudCardContent>
    <MudCardActions Class="text-center">
    <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
    <MudSpacer />
    <MudButton Variant="Variant.Text" Color="Color.Error" IconClass="@Icons.Material.Outlined.Delete" OnClick="UpdateListOnDelete">Delete</MudButton>
    </MudCardActions>
    </MudCard>
*@
<!-- Mud Message Box Delete Task Confirm -->
<MudMessageBox @ref="confirmDeleteMsg" Title="Confirm Action" CancelText="Cancel">
    <MessageContent>
        Deleting a task can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter] public TaskModel Task { get; set; }

    //Mud Message Box delete task confirm
    MudMessageBox confirmDeleteMsg { get; set; }

    protected async void UpdateListOnDelete()
    {
        //Mud Message Box Delete Task Confirm
        bool? result = await confirmDeleteMsg.Show();
        if (result is not null)
        {
            try
            {
                var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
                //storedTasks.Remove(Task);
                storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
                await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
                Snackbar.Add($"Task #{Task.Id} deleted successfully.", Severity.Success);
                //StateHasChanged();
            }
            catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }
            finally { StateHasChanged(); }
        }
    }

    protected async void OnCompletedTask(bool completed)
    {
        try
        {

            var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
            Task.Completed = completed;
            storedTasks.Add(Task);
            await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
            if (completed) { Snackbar.Add($"Task #{Task.Id} has been completed.", Severity.Success); }
            else { Snackbar.Add($"Task #{Task.Id} is pending again.", Severity.Warning); }
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error);}
        finally { StateHasChanged(); }
    }

    protected async void OnArchivedTask(bool archived)
    {
        try
        {
            var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            storedTasks.Remove(storedTasks.Where(x => x.Id == Task.Id).First());
            Task.Archived = archived;
            storedTasks.Add(Task);
            await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", storedTasks);
            if (archived) { Snackbar.Add($"Task #{Task.Id} has been archived.", Severity.Info); }
            else { Snackbar.Add($"Task #{Task.Id} has been unarchived.", Severity.Warning); }
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error);}
        finally { StateHasChanged(); }
    }
}
