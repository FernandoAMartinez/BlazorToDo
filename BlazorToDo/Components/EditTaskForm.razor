@page "/tasks/new"
@page "/tasks/{guid}"
@inject ISnackbar Snackbar
@inject ITaskRepository taskRepository
@inject ILocalStorageService localStorage

<MudDialog Options="new DialogOptions(){ Position = DialogPosition.TopCenter, CloseButton = true, NoHeader = true }">
    <DialogContent>
        @*<MudContainer Style="max-height: 800px;overflow-y: scroll">*@
        <MudContainer Class="p-0">
            <EditForm Model="@currentTask" OnValidSubmit="SubmitTask">
                <DataAnnotationsValidator />

                <MudCard Elevation="0">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            @switch (@currentTask.ReportedUrgency)
                            {
                                case Urgency.Low:
                                    <MudAvatar Size="Size.Large" Color="Color.Secondary">@currentTask.TaskId</MudAvatar>
                                    break;
                                case Urgency.Medium:
                                    <MudAvatar Size="Size.Large" Color="Color.Warning">@currentTask.TaskId</MudAvatar>
                                    break;
                                case Urgency.High:
                                    <MudAvatar Size="Size.Large" Color="Color.Error">@currentTask.TaskId</MudAvatar>
                                    break;
                                case Urgency.NotUrgent:
                                    <MudAvatar Size="Size.Large" Color="Color.Primary">@currentTask.TaskId</MudAvatar>
                                    break;
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <!-- Task Title -->
                            <MudTextField T="string" @bind-Value="currentTask.Title" For="@(()=> currentTask.Title)"
                                          Label="Title" Required="true" RequiredError="Task Title is required!"
                                          Disabled="@disable" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                          
                            <MudTextField T="Guid" @bind-Value="currentTask.UserId" For="@(()=> currentTask.UserId)"
                                          Label="User Id" Required="false" Disabled="true" Variant="Variant.Text"
                                          Margin="Margin.Dense"/>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>

                        <!-- Task Description -->
                        <MudTextField T="string" @bind-Value="currentTask.Description" For="@(()=> currentTask.Description)"
                                      Label="Description" Required="true" RequiredError="Task Description is required!"
                                      Disabled="@disable" Variant="Variant.Outlined" Lines="2" Margin="Margin.Dense" />

                        <!-- Task Creation Date -->
                        <MudTextField T="DateTime" @bind-Value="currentTask.CreationDate" For="@(()=> currentTask.CreationDate)"
                                      Label="Creation Date" Required="true" Format="dd/MM/yyyy" Disabled="true"
                                      Variant="Variant.Outlined" Margin="Margin.Dense"/>

                        <!-- Task Due Date -->
                        <MudTextField T="DateTime" @bind-Value="currentTask.DueDate" For="@(()=> currentTask.DueDate)"
                                      Label="Due Date" Required="true" Format="dd/MM/yyyy"
                                      Validation="@(()=> currentTask.DueDate >= currentTask.CreationDate)"
                                      Disabled="@disable" Variant="Variant.Outlined" Margin="Margin.Dense"/>

                        <!-- Task Urgency -->
                        <MudRadioGroup @bind-SelectedOption="@currentTask.ReportedUrgency" For="(()=>currentTask.ReportedUrgency)">
                            <MudRadio Disabled="@disable" Option="@(Urgency.NotUrgent)" Color="Color.Primary">Not Urgent</MudRadio>
                            <MudRadio Disabled="@disable" Option="@(Urgency.Low)" Color="Color.Secondary">Low</MudRadio>
                            <MudRadio Disabled="@disable" Option="@(Urgency.Medium)" Color="Color.Warning">Medium</MudRadio>
                            <MudRadio Disabled="@disable" Option="@(Urgency.High)" Color="Color.Error">High</MudRadio>
                        </MudRadioGroup>

                        <!-- Task Tags-->
                        <MudPaper Elevation="0">
                            <MudText Typo="Typo.subtitle1">Tags:</MudText>
                            <MudChipSet @bind-SelectedChips="selectedTags" MultiSelection="true" Filter="filter" Class="d-flex">
                                <MudChip Disabled="@disable" Variant="Variant.Text" Color="Color.Info" Text="Urgent"/>
                                <MudChip Disabled="@disable" Variant="Variant.Text" Color="Color.Info" Text="New"/>
                                <MudChip Disabled="@disable" Variant="Variant.Text" Color="Color.Info" Text="Work"/>
                                <MudChip Disabled="@disable" Variant="Variant.Text" Color="Color.Info" Text="Daily"/>
                                <MudChip Disabled="@disable" Variant="Variant.Text" Color="Color.Info" Text="Shop"/>
                            </MudChipSet>

                            @if (selectedTags != null && selectedTags.Length > 0) UpdateTasks(selectedTags);
                            else
                            {
                                <MudText Typo="Typo.subtitle1" Class="text-muted">Nothing selected.</MudText>
                            }
                        </MudPaper>

                        <!-- Comments section -->
@*                        <MudPaper Elevation="0">
                            <MudText Typo="Typo.subtitle1">Comments:</MudText>
                            @if (Mode == EditMode.New)
                            {
                                @if (newComment is not null)
                                {
                                    <MudGrid Justify="Justify.FlexStart">
                                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                                            <MudTextField T="string" Label="@string.Format($"Comment #{newComment.Id}")"
                                                  Disabled="@disable" Variant="Variant.Outlined"
                                                  @bind-Value="newComment.CommentText" Lines="2" />
                                        </MudItem>
                                    </MudGrid>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Class="text-muted">Generating new comment...</MudText>
                                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                }
                            }
                            else
                            {
                                <MudContainer Style="max-height: 150px;overflow-y: scroll">
                                    @if (currentTask.Comments is not null)
                                    {
                                        <MudGrid>
                                            @foreach (var comment in currentTask.Comments)
                                            {
                                                <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12" Class="d-flex row">
                                                    <MudElement HtmlTag="div" Class="d-flex align-center col-2 mr-n3">

                                                        <MudAvatar Color="Color.Secondary">
                                                            @comment.CommentId
                                                        </MudAvatar>
                                                    </MudElement>

                                                    <MudElement HtmlTag="div" Class="d-flex flex-column align-stretch col-9">
                                                        <MudTextField T="string" Label="@string.Format($"Comment #{comment.CommentId}")"
                                                          Disabled="@disable" Variant="Variant.Filled"
                                                          Text="@comment.CommentText" Lines="2" />
                                                    </MudElement>

                                                    <MudElement HtmlTag="div" Class="d-flex align-stretch col-1">

                                                        <MudIconButton Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Filled.Delete"
                                                           Color="Color.Error" Disabled="@disable"
                                                           OnClick="@(()=>currentTask.Comments.Remove(comment))" />
                                                    </MudElement>
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    }
                                </MudContainer>

                                @if (newComment is not null)
                                {
                                    <MudGrid>
                                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" xxl="12">
                                            <MudTextField T="string" Label="@string.Format($"Comment #{newComment.CommentId}")"
                                                  Disabled="@disable" Variant="Variant.Outlined"
                                                  @bind-Value="newComment.CommentText" Lines="3" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            }
                        </MudPaper>
*@
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="CancelSubmit" Class="rounded-xl">Cancel</MudButton>
                        <MudButton Disabled="@processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto rounded-xl">
                        @if (processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing...</MudText>
                        }
                        else
                        {
                            <MudText>Save</MudText>
                        }
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback refreshListCallback { get; set; }
    //[Parameter] public string Id { get; set; }
    [Parameter] public Guid Guid { get; set; }
    [Parameter] public EditMode Mode { get; set; }

    //public TaskModel Task { get; set; }
    private List<TaskModel> tasks;
    private TaskModel currentTask = new();
    private TaskComment newComment;
    MudChip[] selectedTags;
    private bool success;
    private bool filter;
    private bool disable;
    private bool processing;

    protected async override Task OnParametersSetAsync()
    //protected override async Task OnInitializedAsync()
    {
        var currentUser = await localStorage.GetItemAsStringAsync("user_id");

        switch (Mode)
        {
            case EditMode.New:
                tasks = await taskRepository.GetAll();
                //Task = new();
                currentTask = new() { UserId = Guid.Parse(currentUser) };

                if (!tasks.Count.Equals(0))
                    currentTask.TaskId = tasks.Max(x => x.TaskId) + 1;
                else
                    currentTask.TaskId = 1;

                newComment = new TaskComment()
                    {
                        CommentDate = DateTime.Now,
                        CommentId = 1
                    };
                disable = false;
                break;

            case EditMode.Edit:
                tasks = await taskRepository.GetAll();
                //Task = taskRepository.GetById(Int32.Parse(Id));
                //Task = taskRepository.GetById(Guid);
                currentTask = await taskRepository.GetById(Guid);
                //if (Task.Completed || Task.Archived)
                if (currentTask.Completed || currentTask.Archived)
                {
                    Snackbar.Add($"Completed tasks cannot be edited.", Severity.Error);
                    MudDialog.Close(DialogResult.Cancel);
                }
                newComment = new TaskComment
                    {
                        CommentDate = DateTime.Now,
                        //CommentId = Task.Comments != null ? Task.Comments.Count + 1 : 1
                        CommentId = currentTask.Comments != null ? currentTask.Comments.Count + 1 : 1
                    };
                disable = false;
                break;

            case EditMode.View:
                //Task = taskRepository.GetById(Int32.Parse(Id));
                //Task = taskRepository.GetById(Guid);
                currentTask = await taskRepository.GetById(Guid);
                disable = true;
                break;

        }
    }

    private async void SubmitTask(EditContext context)
    {
        switch (Mode)
        {
            //TODO: On new Task insert
            case EditMode.New:
                await OnNewTask();
                await refreshListCallback.InvokeAsync();
                break;

            //TODO: Update Task
            case EditMode.Edit:
                await OnEditTask(context);
                await refreshListCallback.InvokeAsync();
                break;

                //TODO: On view task, do nothing
                //case EditMode.View:
                //    //Task = taskRepository.GetById(Int32.Parse(Id));
                //    //Task = taskRepository.GetById(Guid);
                //    currentTask = taskRepository.GetById(Guid);
                //    break;
        }
    }

    private async Task OnNewTask()
    {
        processing = true;
        //Map the task
        //Task = (TaskModel)context.Model;
        //currentTask = (TaskModel)context.Model;

        try
        {
            //if (tasks is not null) Task.Id = tasks.Max(x => x.Id) + 1;
            //else Task.Id = 1;
            //if (tasks is not null) Task.TaskId = tasks.Max(x => x.TaskId) + 1;
            //else Task.TaskId = 1;
            if (tasks is not null) currentTask.TaskId = tasks.Max(x => x.TaskId) + 1;
            else currentTask.TaskId = 1;
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }

        //
        //if (!tasks.Contains(Task))
        if (!tasks.Contains(currentTask))
        {
            //Task.CreationDate = DateTime.Now;
            currentTask.CreationDate = DateTime.Now;
            //currentTask.UserId = await localStorage.GetItemAsync<Guid>("user_id");

            //if (Task.Comments is null)
            // TODO: Add new comment behavior
            //if (currentTask.Comments is null)
            //{
            //    if (newComment is not null)
            //        //Task.Comments = new List<TaskComment>() { newComment };
            //        currentTask.Comments = new List<TaskComment>() { newComment };
            //}

            try
            {
                //await taskRepository.Insert(Task);
                await taskRepository.Insert(currentTask);
                //Snackbar.Add($"Task #{Task.Id} created successfully.", Severity.Success);
                //Snackbar.Add($"Task #{Task.TaskId} created successfully.", Severity.Success);
                Snackbar.Add($"Task #{currentTask.TaskId} created successfully.", Severity.Success);
                success = true;
                MudDialog.Close(DialogResult.Ok(true));

            }
            catch (Exception ex)
            {
                success = false;
                Snackbar.Add($"Error: { ex.Message }", Severity.Error);
                MudDialog.Close(DialogResult.Cancel);
            }
            finally{ processing = false; }
        }

        //StateHasChanged();
        await refreshListCallback.InvokeAsync();
    }

    private async Task OnEditTask(EditContext context)
    {
        //Task = taskRepository.GetById(Int32.Parse(Id));
        //if (tasks.Any(x => x.Id == Task.Id))
        if (tasks.Any(x => x.Id == currentTask.Id))
        {
            //if (Task.Comments is null)
            // TODO: Edit comment behavior
            //if (currentTask.Comments is null)
            //{
            //    if (newComment is not null)
            //        //Task.Comments = new List<TaskComment>() { newComment };
            //        currentTask.Comments = new List<TaskComment>() { newComment };
            //}
            ////else { Task.Comments.Add(newComment); }
            //else { currentTask.Comments.Add(newComment); }

            try
            {
                //await taskRepository.Update(Task);
                await taskRepository.Update(currentTask);
                //Snackbar.Add($"Task #{Task.Id} updated successfully.", Severity.Success);
                //Snackbar.Add($"Task #{Task.TaskId} updated successfully.", Severity.Success);
                Snackbar.Add($"Task #{currentTask.TaskId} updated successfully.", Severity.Success);
                success = true;
                MudDialog.Close(DialogResult.Ok(true));

            }
            catch (Exception ex)
            {
                success = false;
                Snackbar.Add($"Error: { ex.Message }", Severity.Error);
                MudDialog.Close(DialogResult.Cancel);
            }
            finally{ processing = false; }

        }

        StateHasChanged();
        //await refreshListCallback.InvokeAsync();
    }

    private void CancelSubmit()
    {
        switch (Mode)
        {
            //TODO: On new Task insert
            case EditMode.New:
                Snackbar.Add($"Creation cancelled.", Severity.Warning);
                break;

            //TODO: Update Task
            case EditMode.Edit:
                Snackbar.Add($"Update cancelled.", Severity.Warning);
                break;

            //TODO: On view task, do nothing
            //case EditMode.View:
            //    break;
        }

        //Snackbar.Add($"Creation canceled.", Severity.Warning);
        MudDialog.Cancel();
    }
    //private void UpdateTasks(MudChip[] chips) => Task.Tags = chips.Select(x => x.Text).ToArray();
    private void UpdateTasks(MudChip[] chips) => currentTask.Tags = chips.Select(x => x.Text).ToArray();

}
