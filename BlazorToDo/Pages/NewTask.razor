@page "/t/new"
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITaskRepository taskRepository

<MudDialog Options="new DialogOptions(){Position = DialogPosition.TopCenter}">
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
            <DataAnnotationsValidator />

            <MudCard Elevation="0">
                <MudCardContent>
                    <!-- Task Title -->
                    <MudTextField T="string" @bind-Value="model.Title" For="@(()=> model.Title)"
                                  Label="Title" Required="true" RequiredError="Task Title is required!" />
                    <!-- Task Description -->
                    <MudTextField T="string" @bind-Value="model.Description" For="@(()=> model.Description)"
                                  Label="Description" Required="true" RequiredError="Task Description is required!" />

                    <!-- Task Creation Date -->
                    <MudTextField T="DateTime" @bind-Value="model.CreationDate" For="@(()=> model.CreationDate)"
                                  Label="Creation Date" Required="true" Format="dd/MM/yyyy" Disabled="true" />

                    <!-- Task Due Date -->
                    <MudTextField T="DateTime" @bind-Value="model.DueDate" For="@(()=> model.DueDate)"
                                  Label="Due Date" Required="true" Format="dd/MM/yyyy" Validation="@(()=> model.DueDate >= model.CreationDate)" />

                    <!-- Task Urgency -->
                    <MudRadioGroup @bind-SelectedOption="@model.ReportedUrgency" For="(()=>model.ReportedUrgency)">
                        <MudRadio Option="@(Urgency.NotUrgent)" Color="Color.Primary">Not Urgent</MudRadio>
                        <MudRadio Option="@(Urgency.Low)" Color="Color.Secondary">Low</MudRadio>
                        <MudRadio Option="@(Urgency.Medium)" Color="Color.Warning">Medium</MudRadio>
                        <MudRadio Option="@(Urgency.High)" Color="Color.Error">High</MudRadio>
                    </MudRadioGroup>

                    <!-- Task Tags-->
                    <MudPaper Elevation="0">
                        <MudText Typo="Typo.subtitle1">Tags:</MudText>
                        <MudChipSet @bind-SelectedChips="selectedTags" MultiSelection="true" Filter="filter">
                            <MudChip Variant="Variant.Text" Color="Color.Info" Text="Urgent"></MudChip>
                            <MudChip Variant="Variant.Text" Color="Color.Info" Text="New"></MudChip>
                            <MudChip Variant="Variant.Text" Color="Color.Info" Text="Work"></MudChip>
                            <MudChip Variant="Variant.Text" Color="Color.Info" Text="Daily"></MudChip>
                            <MudChip Variant="Variant.Text" Color="Color.Info" Text="Shop"></MudChip>
                        </MudChipSet>

                        @if (selectedTags != null && selectedTags.Length > 0) UpdateTasks(selectedTags);
                        else { <MudText Typo="Typo.subtitle1" Class="text-muted">Nothing selected.</MudText> }
                    </MudPaper>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="CancelSubmit">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
    @*<DialogActions>
        <MudButton OnClick="CancelSubmit">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
        </DialogActions>*@
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public EventCallback refreshListCallback { get; set; }
    private List<TaskModel> tasks;
    bool filter = true;
    MudChip[] selectedTags;
    TaskModel model = new();
    private bool success;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            var storedTasks = await taskRepository.GetAll();
            if (storedTasks != null)
            {
                if (!storedTasks.Count.Equals(0))
                    tasks = storedTasks;
            }
            else { tasks = new List<Models.TaskModel>(); }
        }
        catch (Exception ex) { }
    }


    private async void OnValidSubmit(EditContext context)
    {
        //List<TaskModel> Tasks = null;
        //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
        //if (storedTasks != null)
        //{
        //    if (!storedTasks.Count.Equals(0))
        //        Tasks = storedTasks;
        //}
        //else { Tasks = new List<Models.TaskModel>(); }

        //((TaskModel)context.Model).Id = Tasks.Max(x => x.Id) + 1;
        try
        {
            //if (tasks is not null) ((TaskModel)context.Model).Id = tasks.Max(x => x.Id) + 1;
            if (tasks is not null) ((TaskModel)context.Model).TaskId = tasks.Max(x => x.TaskId) + 1;
            else
            {
                tasks = new();
                //((TaskModel)context.Model).Id = 1;
                ((TaskModel)context.Model).TaskId = 1;
            }
        }
        catch (Exception ex) { Snackbar.Add($"Error: { ex.Message }", Severity.Error); }

        //if (!Tasks.Contains(context.Model))
        if (!tasks.Contains((TaskModel)context.Model))
        {
            //Update creation day bay today date
            ((TaskModel)context.Model).CreationDate = DateTime.Now;
            try
            {
                success = true;
                await taskRepository.Insert((TaskModel)context.Model);
                Snackbar.Add($"Task #{((TaskModel)context.Model).Id} created successfully.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                success = false;
                Snackbar.Add($"Error: { ex.Message }", Severity.Error);
                MudDialog.Close(DialogResult.Cancel);
            }
        }
        else
        {
            success = false;
            Snackbar.Add($"Something went wrong on task creation.", Severity.Error);
        }

        //StateHasChanged();
        await refreshListCallback.InvokeAsync();
        //NavigationManager.NavigateTo("/t/all");
    }
    private void CancelSubmit()
    {
        Snackbar.Add($"Creation canceled.", Severity.Warning);
        MudDialog.Cancel();
    }
    private void UpdateTasks(MudChip[] chips) => model.Tags = chips.Select(x => x.Text).ToArray();
    //private void UpdateTasks(MudChip[] chips) => model.Tags = chips.ToList();

}