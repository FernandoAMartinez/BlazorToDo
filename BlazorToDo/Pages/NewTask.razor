@page "/t/new"
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
        <DataAnnotationsValidator />

        <MudCard Elevation="0">
            <MudCardContent>
                <!-- Task Title -->
                <MudTextField T="string" @bind-Value="model.Title" For="@(()=> model.Title)" Label="Title" Required="true" RequiredError="Task Title is required!" />
                <!-- Task Description -->
                <MudTextField T="string" @bind-Value="model.Description" For="@(()=> model.Description)"
                              Label="Description" Required="true" RequiredError="Task Description is required!" />
                <!-- Task Due Date -->
                <MudTextField T="DateTime" Label="Due Date" @bind-Value="model.DueDate" For="@(()=> model.DueDate)" Required="true" DateFormat="dd/MM/yyyy" />

                <!-- Task Urgency -->
                <MudRadioGroup @bind-SelectedOption="@model.ReportedUrgency" For="(()=>model.ReportedUrgency)">
                    <MudRadio Option="@(Urgency.Low)" Color="Color.Secondary">Low</MudRadio>
                    <MudRadio Option="@(Urgency.Medium)" Color="Color.Warning">Medium</MudRadio>
                    <MudRadio Option="@(Urgency.High)" Color="Color.Error">High</MudRadio>
                </MudRadioGroup>

                <!-- Task Tags-->
                <MudPaper Elevation="0">
                    <MudText Typo="Typo.subtitle1">Tags:</MudText>
                    <MudChipSet @bind-SelectedChips="selectedTags" MultiSelection="true" Filter="filter">
                        <MudChip Variant="Variant.Text" Color="Color.Info" Text="Urgent"></MudChip>
                        <MudChip Variant="Variant.Text" Color="Color.Info" Text="New"></MudChip>
                        <MudChip Variant="Variant.Text" Color="Color.Info" Text="Work"></MudChip>
                        <MudChip Variant="Variant.Text" Color="Color.Info" Text="Daily"></MudChip>
                        <MudChip Variant="Variant.Text" Color="Color.Info" Text="Shop"></MudChip>
                    </MudChipSet>

                    @if (selectedTags != null && selectedTags.Length > 0) UpdateTasks(selectedTags);
                    else { <MudText Typo="Typo.subtitle1" Class="text-muted">Nothing selected.</MudText> }
                </MudPaper>
            </MudCardContent>
        </MudCard>
    </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelSubmit">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
    </DialogActions>
</MudDialog>

<MudContainer MaxWidth="MaxWidth.Medium">

    
</MudContainer>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool filter = true;
    MudChip[] selectedTags;
    TaskModel model = new();
    private bool success;

    private async void OnValidSubmit(EditContext context)
    {
        List<TaskModel> Tasks = null;
        var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
        if (storedTasks != null)
        {
            if (!storedTasks.Count.Equals(0))
                Tasks = storedTasks;
        }
        else { Tasks = new List<Models.TaskModel>(); }

        ((TaskModel)context.Model).Id = Tasks.Max(x => x.Id) + 1;

        if (!Tasks.Contains(context.Model))
        {
            Tasks.Add((TaskModel)context.Model);
            success = true;
            await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", Tasks);
            Snackbar.Add($"Task #{((TaskModel)context.Model).Id} created successfully.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else 
        {
            success = false;
            Snackbar.Add($"Something went wrong on task creation.", Severity.Error);
        }
        StateHasChanged();
        NavigationManager.NavigateTo("/t/all");
    }
    private void CancelSubmit() 
    { 
        Snackbar.Add($"Creation canceled.", Severity.Warning);
        MudDialog.Cancel(); 
    }
    private void UpdateTasks(MudChip[] chips) => model.Tags = chips.Select(x => x.Text).ToArray();

}
