@page "/resume"
@inject ILocalStorageService localStorage
@inject ISnackbar Snackbar
@inject ITaskRepository taskRepository
@attribute [Authorize]

<PageTitle>Blazor's Task Manager</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Class="fw-bold">Welcome back!</MudText>
    <MudDivider DividerType="DividerType.FullWidth" Class="my-2"/>
    <MudText Typo="Typo.body1">Tasks due at @DateTime.Today.ToString("dd/MM/yyyy")</MudText>
</MudContainer>

<div class="my-2"></div>

<MudContainer MaxWidth="MaxWidth.False">
    @if (Tasks is not null)
    {
        <MudTable HeaderClass="table-primary" FixedHeader="true" 
            Items="@Tasks.Where(x => x.Archived == false && x.DueDate < DateTime.Now).ToList()"
            Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" 
            LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Creation Date</MudTh>
                <MudTh>Due Date</MudTh>
                <MudTh>Urgency</MudTh>
                <MudTh>Tags</MudTh>
                <MudTh>Completed</MudTh>
            </HeaderContent>
            <RowTemplate>
                @*<MudTd DataLabel="Id">@context.Id</MudTd>*@
                <MudTd DataLabel="Id">@context.TaskId</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Creation Date">@context.CreationDate</MudTd>
                <MudTd DataLabel="Due Date">@context.DueDate</MudTd>
                <MudTd DataLabel="Urgency">@context.ReportedUrgency</MudTd>
                <MudTd DataLabel="Tags">
                    @if (@context.Tags is not null)
                    {

                    @foreach (var tag in @context.Tags)
                        {
                        @switch (@context.ReportedUrgency)
                            {
                                case Urgency.Low:
                                <MudChip Color="Color.Secondary">@tag</MudChip>
                                    break;
                                case Urgency.Medium:
                                <MudChip Color="Color.Warning">@tag</MudChip>
                                    break;
                                case Urgency.High:
                                <MudChip Color="Color.Error">@tag</MudChip>
                                    break;
                            }
                        }
                    }
            </MudTd>
            <MudTd DataLabel="Completed">
                @if (context.Completed)
                {
                    <MudChip Color="Color.Success">Done</MudChip>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
    }
    else
    {
        <MudText Typo="Typo.caption">Loading tasks...</MudText>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
</MudContainer>


@code {
    [CascadingParameter] public Task<AuthenticationState> AuthState { get; set; }

    private bool _loading;
    public List<TaskModel> Tasks { get; set; }
    //protected override async Task OnInitializedAsync()
    protected override async Task OnParametersSetAsync()
    {
        //Obtain the stored tasks in the local storage of the application
        try
        {

            //var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            var storedTasks = await taskRepository.GetAll();

            if (storedTasks != null)
            {
                if (!storedTasks.Count.Equals(0))
                {
                    Tasks = storedTasks;
                }
            }
            else
            {
                //If there is no task stored, initialize and store in local storage
                Tasks = new List<TaskModel>();
            }
        }
        catch (Exception ex) { Tasks = null; }
    }
}