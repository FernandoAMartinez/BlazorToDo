@page "/resume"
@inject ILocalStorageService localStorage
@inject ISnackbar Snackbar
@*@inject ITaskRepository TaskRepo*@

<PageTitle>Material ToDo's Application</PageTitle>
<MudAlert Elevation="4" Severity="Severity.Info">App is still on development. Please refer any issue to my Github Repository.</MudAlert>
<MudSpacer></MudSpacer>
<MudContainer MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h1">Welcome back!</MudText>
    <MudText Typo="Typo.subtitle1">Welcome to your new app.</MudText>
</MudContainer>
<MudDivider></MudDivider>
<MudContainer>
    @if (Tasks is not null)
    {
        <MudTable HeaderClass="table-primary" FixedHeader="true" Items="@Tasks.Where(x => x.Archived == false).ToList()" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Creation Date</MudTh>
                <MudTh>Due Date</MudTh>
                <MudTh>Urgency</MudTh>
                <MudTh>Tags</MudTh>
                <MudTh>Completed</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Creation Date">@context.CreationDate</MudTd>
                <MudTd DataLabel="Due Date">@context.DueDate</MudTd>
                <MudTd DataLabel="Urgency">@context.ReportedUrgency</MudTd>
                <MudTd DataLabel="Tags">
                    @if (@context.Tags is not null)
                    {

                    @foreach (var tag in @context.Tags)
                        {
                        @switch (@context.ReportedUrgency)
                            {
                                case Urgency.Low:
                                <MudChip Color="Color.Secondary">@tag</MudChip>
                                    break;
                                case Urgency.Medium:
                                <MudChip Color="Color.Warning">@tag</MudChip>
                                    break;
                                case Urgency.High:
                                <MudChip Color="Color.Error">@tag</MudChip>
                                    break;
                            }
                        }
                    }
            </MudTd>
            <MudTd DataLabel="Completed">
                @if (context.Completed)
                    {
                    <MudChip Color="Color.Success">Done</MudChip>
                    }
            </MudTd>
        </RowTemplate>
    </MudTable>
    }
    else
    {
        <MudText Typo="Typo.caption">Loading tasks...</MudText>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
</MudContainer>


@code {
    private bool _loading;
    public List<TaskModel> Tasks { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //Obtain the stored tasks in the local storage of the application
        try
        {

            var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
            if (storedTasks != null)
            {
                if (!storedTasks.Count.Equals(0))
                {
                    //Tasks = TaskRepo.GetAll();
                    Tasks = storedTasks;
                }
            }
            else
            {
                //If there is no task stored, initialize and store in local storage
                //Tasks = new List<TaskModel>();
                Tasks = new List<TaskModel>()
                {
                    new Models.TaskModel{
                        Id=1,
                        Completed = false,
                        Archived = false,
                        Title = "Title of Task 1", Description="This is your task #1",
                        CreationDate=DateTime.Now, DueDate=DateTime.Now,
                        ReportedUrgency = Urgency.Medium,
                        Tags=new[]{ "First","Urgent"}},
                    new Models.TaskModel{
                        Id=2,
                        Completed = false,
                        Archived = false,
                        Title = "Title of Task 2", Description="This is your task #2",
                        CreationDate=DateTime.Now, DueDate=DateTime.Now,
                        ReportedUrgency = Urgency.High,
                        Tags=new[]{ "Second","Critical"}},
                    new Models.TaskModel{
                        Id=3,
                        Completed = false,
                        Archived = true,
                        Title = "Title of Task 3", Description="This is your task #3",
                        CreationDate=DateTime.Now, DueDate=DateTime.Now,
                        ReportedUrgency = Urgency.Low,
                        Tags=new[]{ "Third","Optional"}}
                };
                //Tasks = new List<Models.TaskModel>();
                await localStorage.SetItemAsync<List<TaskModel>>("storedTasks", Tasks);
            }
        }
        catch (Exception ex)
        {
            Tasks = null;
        }
    }
}