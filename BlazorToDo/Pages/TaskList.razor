@page "/t/all"
@inject ILocalStorageService localStorage


<div class="container-fluid d-flex">
    <div class="row">
        <div class="col-12">
        </div>
        <div class="col-12">
            <MudContainer Fixed="false">
                @if (creationSuccess)
                {
                    <MudAlert AlertTextPosition="AlertTextPosition.Center" Variant="Variant.Outlined" Severity="Severity.Success">Task #4 Created succesfully...</MudAlert>
                }
                <MudTextField @bind-Value="SearchValue" Variant="Variant.Outlined" Label="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Secondary" Margin="Margin.Dense" />
                <MudText Typo="Typo.h6">My Tasks</MudText>
                <MudDivider></MudDivider>

                @*<MudContainer Fixed="true" Class="flex-column flex-wrap">*@
                @if (Tasks is not null)
                {
                    <MudGrid>
                        @foreach (var task in Tasks)
                        {
                            <MudItem xs="12" sm="12" md="6" lg="4">
                                <MudCard Elevation="3" Class="m-3 p-0">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@task.Title</MudText>
                                            <MudSpacer />
                                            <MudText Typo="Typo.subtitle1">@task.CreationDate.ToShortDateString()</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText Typo="Typo.body1">@task.Description</MudText>
                                        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                                        <MudContainer Fixed="true">
                                            <MudText GutterBottom="true">Tags</MudText>
                                            @foreach (var tag in @task.Tags)
                                            {
                                                <MudChip Color="Color.Secondary">@tag</MudChip>
                                            }
                                        </MudContainer>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <MudText Typo="Typo.caption">Loading tasks...</MudText>
                }
                @*@*</MudContainer>*@
            </MudContainer>

        </div>
        <MudContainer Fixed="false" Class="d-flex flex-row-reverse fixed-bottom mb-5" Style="bottom:0; right:0;">
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="@((e) => CreateTask())" />
        </MudContainer>
    </div>
</div>



@code {
    bool creationSuccess = false;
    public string SearchValue { get; set; }
    public List<Models.TaskModel> Tasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var storedTasks = await localStorage.GetItemAsync<List<TaskModel>>("storedTasks");
        if (!storedTasks.Count.Equals(0) && storedTasks is not null) Tasks = storedTasks;

        //Tasks = new List<Models.TaskModel>()
        //{
        //    new Models.TaskModel{Id=1, Completed= false,
        //                        Title = "Title of Task 1", Description="This is your task #1",
        //                         CreationDate=DateTime.Now, DueDate=DateTime.Now,
        //                         Tags=new[]{ "First","Urgent"} },
        //    new Models.TaskModel{Id=1, Completed= false,
        //                        Title = "Title of Task 2", Description="This is your task #2",
        //                         CreationDate=DateTime.Now, DueDate=DateTime.Now,
        //                         Tags=new[]{ "Second","Critical"} },
        //    new Models.TaskModel{Id=1, Completed= false,
        //                        Title = "Title of Task 3", Description="This is your task #3",
        //                         CreationDate=DateTime.Now, DueDate=DateTime.Now,
        //                         Tags=new[]{ "Third","Optional"} },
        //};
    }

    void CreateTask() => creationSuccess = !creationSuccess;
}